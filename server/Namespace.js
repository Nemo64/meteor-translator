// NOTE: the variable _files will be generated by the plugin
Translator._namespaces = {};

/**
 * The namespace is actually a bounch of files but one file per locale. eg.:
 * myTool.en_US.lang.yml
 * myTool.de_DE.lang.yml
 *
 * This is the server implementation which means it blocks.
 *
 * @protected use Namespace.instance(name) instead
 * @constructor
 * @param {string} name
 */
Namespace = function (name) {
  var self = this;
  
  NamespaceAbstract.apply(self, arguments);
  //self._locales = {}; // { "locale": { "key": "value" } }
  
  if (Translator._namespaces.hasOwnProperty(name)) {
    self._locales = Translator._namespaces[name];
  } else {
    throw new Error("Namespace '" + self._name + "' does not exist");
  }
};

_.extend(Namespace, NamespaceAbstract); // cheap extend
_.extend(Namespace.prototype, NamespaceAbstract.prototype);

/**
 * Tells if a reactive call could happen.
 *
 * @return {bool}
 */
Namespace.prototype.isLoading = function () {
  return false;
};

/**
 * The server implementation is always prepared
 * 
 * @param {!Language} language
 */
Namespace.prototype.prepare = function (language) {/* void */};
  
/**
 * @param {string}    key
 * @param {!Language} language
 * @return {undefined|mixed}
 */
Namespace.prototype.get = function (key, language) {
  var self = this;
  
  var locales = language.getLocales();
  var locale = _.find(locales, function (locale) {
    var data = self._locales[locale];
    return data != null && data.hasOwnProperty(key);
  });
  var data = self._locales[locale];
  return data != null ? data[key] : undefined;
};
