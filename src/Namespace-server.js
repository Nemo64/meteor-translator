// NOTE: the variable _files will be generated by the plugin
Translator._namespaces = {};

_.extend(Namespace.prototype, {
  /**
   * The namespace is actually a bounch of files but one file per locale. eg.:
   * myTool.en_US.lang.yml
   * myTool.de_DE.lang.yml
   *
   * This is the server implementation which means it blocks.
   *
   * @protected use Namespace.instance(name) instead
   * @param {string} name
   */
  _init: function (name) {
    var self = this;
    if (! Translator._namespaces.hasOwnProperty(name)) {
      throw new Error("Namespace '" + self._name + "' does not exist");
    }
    
    self._locales = Translator._namespaces[name];
  },

  /**
   * Tells if a reactive call could happen.
   *
   * @return {bool}
   */
  isLoading: function () {
    return false;
  },

  /**
   * The server implementation is always prepared
   * 
   * @param {!Language} language
   */
  prepare: function (language) {/* void */},
    
  /**
   * @param {string}    key
   * @param {!Language} language
   * @return {undefined|mixed}
   */
  get: function (key, language) {
    var self = this;
    
    var locales = language.getLocales();
    var locale = _.find(locales, function (locale) {
      var data = self._locales[locale];
      return data != null && data.hasOwnProperty(key);
    });
    var data = self._locales[locale];
    return {
      value: data && data[key],
      meta: (data && data.$) || {},
      locale: locale
    };
  }
});
